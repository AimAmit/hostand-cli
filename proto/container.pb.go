// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: proto/container.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AppVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain  string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *AppVersion) Reset() {
	*x = AppVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_container_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersion) ProtoMessage() {}

func (x *AppVersion) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersion.ProtoReflect.Descriptor instead.
func (*AppVersion) Descriptor() ([]byte, []int) {
	return file_proto_container_proto_rawDescGZIP(), []int{0}
}

func (x *AppVersion) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *AppVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Data:
	//	*FileRequest_AppVersion
	//	*FileRequest_Chunk
	Data isFileRequest_Data `protobuf_oneof:"data"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_container_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_proto_container_proto_rawDescGZIP(), []int{1}
}

func (m *FileRequest) GetData() isFileRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FileRequest) GetAppVersion() *AppVersion {
	if x, ok := x.GetData().(*FileRequest_AppVersion); ok {
		return x.AppVersion
	}
	return nil
}

func (x *FileRequest) GetChunk() []byte {
	if x, ok := x.GetData().(*FileRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isFileRequest_Data interface {
	isFileRequest_Data()
}

type FileRequest_AppVersion struct {
	AppVersion *AppVersion `protobuf:"bytes,1,opt,name=appVersion,proto3,oneof"`
}

type FileRequest_Chunk struct {
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*FileRequest_AppVersion) isFileRequest_Data() {}

func (*FileRequest_Chunk) isFileRequest_Data() {}

type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_container_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_proto_container_proto_rawDescGZIP(), []int{2}
}

func (x *FileResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type IPResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *IPResponse) Reset() {
	*x = IPResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_container_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPResponse) ProtoMessage() {}

func (x *IPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_container_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPResponse.ProtoReflect.Descriptor instead.
func (*IPResponse) Descriptor() ([]byte, []int) {
	return file_proto_container_proto_rawDescGZIP(), []int{3}
}

func (x *IPResponse) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

var File_proto_container_proto protoreflect.FileDescriptor

var file_proto_container_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e,
	0x0a, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x24, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1c, 0x0a, 0x0a, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x32, 0xbf, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x6b, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x12, 0x3b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x69, 0x6d, 0x61, 0x6d, 0x69, 0x74, 0x2f, 0x67,
	0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_container_proto_rawDescOnce sync.Once
	file_proto_container_proto_rawDescData = file_proto_container_proto_rawDesc
)

func file_proto_container_proto_rawDescGZIP() []byte {
	file_proto_container_proto_rawDescOnce.Do(func() {
		file_proto_container_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_container_proto_rawDescData)
	})
	return file_proto_container_proto_rawDescData
}

var file_proto_container_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_container_proto_goTypes = []interface{}{
	(*AppVersion)(nil),   // 0: proto.AppVersion
	(*FileRequest)(nil),  // 1: proto.FileRequest
	(*FileResponse)(nil), // 2: proto.FileResponse
	(*IPResponse)(nil),   // 3: proto.IPResponse
}
var file_proto_container_proto_depIdxs = []int32{
	0, // 0: proto.FileRequest.appVersion:type_name -> proto.AppVersion
	1, // 1: proto.DockerService.FileUpload:input_type -> proto.FileRequest
	0, // 2: proto.DockerService.ContainerCreate:input_type -> proto.AppVersion
	0, // 3: proto.DockerService.GetIPVersion:input_type -> proto.AppVersion
	2, // 4: proto.DockerService.FileUpload:output_type -> proto.FileResponse
	2, // 5: proto.DockerService.ContainerCreate:output_type -> proto.FileResponse
	3, // 6: proto.DockerService.GetIPVersion:output_type -> proto.IPResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_container_proto_init() }
func file_proto_container_proto_init() {
	if File_proto_container_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_container_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_container_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_container_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_container_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_container_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FileRequest_AppVersion)(nil),
		(*FileRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_container_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_container_proto_goTypes,
		DependencyIndexes: file_proto_container_proto_depIdxs,
		MessageInfos:      file_proto_container_proto_msgTypes,
	}.Build()
	File_proto_container_proto = out.File
	file_proto_container_proto_rawDesc = nil
	file_proto_container_proto_goTypes = nil
	file_proto_container_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DockerServiceClient is the client API for DockerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerServiceClient interface {
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (DockerService_FileUploadClient, error)
	ContainerCreate(ctx context.Context, in *AppVersion, opts ...grpc.CallOption) (*FileResponse, error)
	GetIPVersion(ctx context.Context, in *AppVersion, opts ...grpc.CallOption) (*IPResponse, error)
}

type dockerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerServiceClient(cc grpc.ClientConnInterface) DockerServiceClient {
	return &dockerServiceClient{cc}
}

func (c *dockerServiceClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (DockerService_FileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DockerService_serviceDesc.Streams[0], "/proto.DockerService/FileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &dockerServiceFileUploadClient{stream}
	return x, nil
}

type DockerService_FileUploadClient interface {
	Send(*FileRequest) error
	CloseAndRecv() (*FileResponse, error)
	grpc.ClientStream
}

type dockerServiceFileUploadClient struct {
	grpc.ClientStream
}

func (x *dockerServiceFileUploadClient) Send(m *FileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dockerServiceFileUploadClient) CloseAndRecv() (*FileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dockerServiceClient) ContainerCreate(ctx context.Context, in *AppVersion, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/proto.DockerService/ContainerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerServiceClient) GetIPVersion(ctx context.Context, in *AppVersion, opts ...grpc.CallOption) (*IPResponse, error) {
	out := new(IPResponse)
	err := c.cc.Invoke(ctx, "/proto.DockerService/GetIPVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServiceServer is the server API for DockerService service.
type DockerServiceServer interface {
	FileUpload(DockerService_FileUploadServer) error
	ContainerCreate(context.Context, *AppVersion) (*FileResponse, error)
	GetIPVersion(context.Context, *AppVersion) (*IPResponse, error)
}

// UnimplementedDockerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDockerServiceServer struct {
}

func (*UnimplementedDockerServiceServer) FileUpload(DockerService_FileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (*UnimplementedDockerServiceServer) ContainerCreate(context.Context, *AppVersion) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContainerCreate not implemented")
}
func (*UnimplementedDockerServiceServer) GetIPVersion(context.Context, *AppVersion) (*IPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPVersion not implemented")
}

func RegisterDockerServiceServer(s *grpc.Server, srv DockerServiceServer) {
	s.RegisterService(&_DockerService_serviceDesc, srv)
}

func _DockerService_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DockerServiceServer).FileUpload(&dockerServiceFileUploadServer{stream})
}

type DockerService_FileUploadServer interface {
	SendAndClose(*FileResponse) error
	Recv() (*FileRequest, error)
	grpc.ServerStream
}

type dockerServiceFileUploadServer struct {
	grpc.ServerStream
}

func (x *dockerServiceFileUploadServer) SendAndClose(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dockerServiceFileUploadServer) Recv() (*FileRequest, error) {
	m := new(FileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DockerService_ContainerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).ContainerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DockerService/ContainerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).ContainerCreate(ctx, req.(*AppVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerService_GetIPVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServiceServer).GetIPVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DockerService/GetIPVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServiceServer).GetIPVersion(ctx, req.(*AppVersion))
	}
	return interceptor(ctx, in, info, handler)
}

var _DockerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DockerService",
	HandlerType: (*DockerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContainerCreate",
			Handler:    _DockerService_ContainerCreate_Handler,
		},
		{
			MethodName: "GetIPVersion",
			Handler:    _DockerService_GetIPVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _DockerService_FileUpload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/container.proto",
}
